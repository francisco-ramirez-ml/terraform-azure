trigger:
- main

pr:
- main

variables:
  # Define variables
  terraformVersion: '1.5.0' # Set the Terraform version you need

  # Use Key Vault to get secrets securely
  azureServicePrincipalClientId: $(AZURE_SERVICE_PRINCIPAL_CLIENT_ID) # Replace with your Key Vault secret name
  azureServicePrincipalClientSecret: $(AZURE_SERVICE_PRINCIPAL_CLIENT_SECRET) # Replace with your Key Vault secret name
  azureSubscriptionId: $(AZURE_SUBSCRIPTION_ID) # Replace with your Key Vault secret name
  azureTenantId: $(AZURE_TENANT_ID) # Replace with your Key Vault secret name

jobs:
- job: Terraform
  displayName: 'Run Terraform'
  pool:
    vmImage: 'ubuntu-latest'

  steps:
  - task: Checkout@2
    inputs:
      repository: 'self'
      clean: true

  - task: UseTerraform@0
    inputs:
      versionSpec: '$(terraformVersion)'
      addToPath: true

  - script: |
      terraform --version
    displayName: 'Display Terraform Version'

  - script: |
      terraform init
    displayName: 'Initialize Terraform'

  - script: |
      terraform validate
    displayName: 'Validate Terraform Configuration'

  - script: |
      terraform plan
    displayName: 'Plan Terraform Deployment'

  - script: |
      terraform apply -auto-approve
    displayName: 'Apply Terraform Configuration'

  - task: AzureKeyVault@2
    inputs:
      azureSubscription: 'Azure Service Connection' # Replace with your Azure service connection
      KeyVaultName: 'myKeyVault' # Replace with your Key Vault name
      SecretsFilter: '*' # Retrieves all secrets, adjust if needed
      RunAsPreJob: true

  - task: AzureCLI@2
    inputs:
      azureSubscription: 'Azure Service Connection' # Replace with your Azure service connection
      scriptType: 'bash'
      scriptPath: 'verify_resource_creation.sh'
    displayName: 'Verify Azure Resource Creation'
